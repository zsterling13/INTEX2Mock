// <auto-generated />
using System;
using INTEX2Mock.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace INTEX2Mock.Migrations
{
    [DbContext(typeof(PWOIKMContext))]
    [Migration("20210414042505_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("INTEX2Mock.Models.BurialTable", b =>
                {
                    b.Property<int>("BioSampleId")
                        .HasColumnType("int")
                        .HasColumnName("bio_sample_ID");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AREA");

                    b.Property<string>("Bag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BurialNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Burial_Number");

                    b.Property<string>("Cluster")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Date")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ew")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EW");

                    b.Property<string>("HighEw")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("High_EW");

                    b.Property<string>("HighNs")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("High_NS");

                    b.Property<string>("Initials")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LocationConcat")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_concat");

                    b.Property<string>("LowEw")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Low_EW");

                    b.Property<string>("LowNs")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Low_NS");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Notes2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("notes2");

                    b.Property<string>("Ns")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NS");

                    b.Property<string>("PreviouslySampled")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Previously_Sampled");

                    b.Property<string>("Rack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BioSampleId");

                    b.ToTable("BurialTable");
                });

            modelBuilder.Entity("INTEX2Mock.Models.C14Table", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("id");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AREA");

                    b.Property<string>("Burial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BurialLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_location");

                    b.Property<string>("C14Sample2017")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("C14_Sample_2017");

                    b.Property<string>("Calibrated95CalendarDateAvg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Calibrated_95_Calendar_Date_AVG");

                    b.Property<int?>("Calibrated95CalendarDateMax")
                        .HasColumnType("int")
                        .HasColumnName("Calibrated_95_Calendar_Date_MAX");

                    b.Property<int?>("Calibrated95CalendarDateMin")
                        .HasColumnType("int")
                        .HasColumnName("Calibrated_95_Calendar_Date_MIN");

                    b.Property<int?>("Calibrated95CalendarDateSpan")
                        .HasColumnType("int")
                        .HasColumnName("Calibrated_95_Calendar_Date_SPAN");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Column19")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("column19");

                    b.Property<int?>("Conventional14cAgeBp")
                        .HasColumnType("int")
                        .HasColumnName("Conventional_14C_age_BP");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EW");

                    b.Property<string>("EwLowPair")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ew_low_pair");

                    b.Property<string>("Foci")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ns")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NS");

                    b.Property<int?>("NsLowPar")
                        .HasColumnType("int")
                        .HasColumnName("ns_low_par");

                    b.Property<string>("QuestionS")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Question_s");

                    b.Property<int?>("Rack")
                        .HasColumnType("int");

                    b.Property<int?>("Rack2")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMl")
                        .HasColumnType("int")
                        .HasColumnName("Size_ml");

                    b.Property<string>("Square")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tube")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TUBE");

                    b.Property<int?>("_14cCalendarDate")
                        .HasColumnType("int")
                        .HasColumnName("_14C_Calendar_Date");

                    b.HasKey("Id");

                    b.ToTable("c14Table");
                });

            modelBuilder.Entity("INTEX2Mock.Models.MainTable", b =>
                {
                    b.Property<int?>("PrimaryKeyId")
                        .HasColumnType("int")
                        .HasColumnName("Primary_key_ID");

                    b.Property<string>("AgeClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("age_classification");

                    b.Property<string>("AgeMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("age_method");

                    b.Property<string>("AreaHillBurials")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Area_Hill_burials");

                    b.Property<bool?>("ArtifactFound")
                        .HasColumnType("bit")
                        .HasColumnName("artifact_found");

                    b.Property<string>("ArtifactsDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("artifacts_description");

                    b.Property<string>("BasilarSuture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("basilar_suture");

                    b.Property<string>("BasionBregmaHeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("basion_bregma_height");

                    b.Property<string>("BasionNasion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("basion_nasion");

                    b.Property<string>("BasionProsthionLength")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("basion_prosthion_length");

                    b.Property<string>("BizygomaticDiameter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bizygomatic_diameter");

                    b.Property<string>("BodyAnalyzeYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("body_analyze_year");

                    b.Property<string>("BoneLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bone_length");

                    b.Property<bool?>("BoneTaken")
                        .HasColumnType("bit")
                        .HasColumnName("bone_taken");

                    b.Property<string>("BurialDepth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_depth");

                    b.Property<string>("BurialGoods")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("burial_goods");

                    b.Property<string>("BurialId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Burial_ID");

                    b.Property<string>("BurialLocationEw")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_location_EW");

                    b.Property<string>("BurialLocationNs")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_location_NS");

                    b.Property<string>("BurialMaterials")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("burial_materials");

                    b.Property<string>("BurialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_number");

                    b.Property<string>("BurialSituation")
                        .HasMaxLength(1100)
                        .HasColumnType("nvarchar(1100)")
                        .HasColumnName("burial_situation");

                    b.Property<string>("BurialSubplot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("burial_subplot");

                    b.Property<string>("ButtonOsteoma")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Button_Osteoma");

                    b.Property<int?>("C14Id")
                        .HasColumnType("int")
                        .HasColumnName("C14_id");

                    b.Property<string>("Cluster")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CranialSuture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cranial_suture");

                    b.Property<string>("CribraOrbitala")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Cribra_Orbitala");

                    b.Property<string>("DateOnSkull")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Date_on_Skull");

                    b.Property<string>("DayFound")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("day_found");

                    b.Property<string>("DescriptionOfTaken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description_of_taken");

                    b.Property<string>("DorsalPitting")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dorsal_pitting");

                    b.Property<string>("EastToFeet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("east_to_feet");

                    b.Property<string>("EastToHead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("east_to_head");

                    b.Property<string>("EpiphysealUnion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("epiphyseal_union");

                    b.Property<string>("EstimateAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estimate_age");

                    b.Property<string>("EstimateLivingStature")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estimate_living_stature");

                    b.Property<string>("FemurDiameter")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("femur_diameter");

                    b.Property<string>("FemurHead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("femur_head");

                    b.Property<string>("FemurLength")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("femur_length");

                    b.Property<string>("FieldBook")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("field_book");

                    b.Property<string>("FieldBookPageNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("field_book_page_num");

                    b.Property<string>("ForemanMagnum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("foreman_magnum");

                    b.Property<string>("GeFunctionTotal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GE_function_total");

                    b.Property<string>("GenderBodyCol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender_body_col");

                    b.Property<string>("Gonian")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gonian");

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("hair_color");

                    b.Property<bool?>("HairTaken")
                        .HasColumnType("bit")
                        .HasColumnName("hair_taken");

                    b.Property<string>("HeadDirection")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("head_direction");

                    b.Property<int?>("HighPairEw")
                        .HasColumnType("int")
                        .HasColumnName("high_pair_EW");

                    b.Property<int?>("HighPairNs")
                        .HasColumnType("int")
                        .HasColumnName("high_pair_NS");

                    b.Property<string>("HowGenderDetermined")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("how_gender_determined");

                    b.Property<string>("Humerus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("humerus");

                    b.Property<string>("HumerusHead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("humerus_head");

                    b.Property<string>("HumerusLength")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("humerus_length");

                    b.Property<string>("IliacCrest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iliac_crest");

                    b.Property<string>("InitialOfDataExpert")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Initial_of_data_expert");

                    b.Property<string>("InitialsChecker")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("initials_checker");

                    b.Property<string>("InterorbitalBreadth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("interorbital_breadth");

                    b.Property<string>("LengthOfRemains")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("length_of_remains");

                    b.Property<string>("LinearHypoplasiaEnamel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Linear_Hypoplasia_Enamel");

                    b.Property<string>("LowPairEw")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("low_pair_EW");

                    b.Property<int?>("LowPairNs")
                        .HasColumnType("int")
                        .HasColumnName("low_pair_NS");

                    b.Property<string>("MaximumCranialBreadth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("maximum_cranial_breadth");

                    b.Property<string>("MaximumCranialLength")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("maximum_cranial_length");

                    b.Property<string>("MaximumNasalBreadth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("maximum_nasal_breadth");

                    b.Property<string>("MedialClavicle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("medial_clavicle");

                    b.Property<string>("MedialIpRamus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("medial_IP_ramus");

                    b.Property<string>("MetopicSuture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Metopic_Suture");

                    b.Property<string>("MonthFound")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("month_found");

                    b.Property<string>("MonthOnSkull")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Month_on_skull");

                    b.Property<string>("NasionProsthion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nasion_prosthion");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NuchalCrest")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nuchal_crest");

                    b.Property<string>("OrbitEdge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orbit_edge");

                    b.Property<string>("OsteologyUnknownComment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Osteology_unknown_comment");

                    b.Property<string>("Osteophytosis")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("osteophytosis");

                    b.Property<string>("ParietalBossing")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("parietal_bossing");

                    b.Property<string>("PathologyAnomalies")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("pathology_anomalies");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("photo");

                    b.Property<string>("PoroticHyperostosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Porotic_Hyperostosis");

                    b.Property<string>("PoroticHyperostosisLocations")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Porotic_Hyperostosis_LOCATIONS");

                    b.Property<string>("PostcraniaTrauma")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Postcrania_Trauma");

                    b.Property<string>("PreaurSulcus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("preaur_sulcus");

                    b.Property<string>("PreservationIndex")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("preservation_index");

                    b.Property<string>("PreservationIndex2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("preservation_index2");

                    b.Property<string>("PubicBone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pubic_bone");

                    b.Property<string>("PubicSymphysis")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pubic_symphysis");

                    b.Property<string>("Rack")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rack");

                    b.Property<string>("Robust")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("robust");

                    b.Property<int?>("SampleId")
                        .HasColumnType("int")
                        .HasColumnName("sample_id");

                    b.Property<int?>("SampleNumber")
                        .HasColumnType("int")
                        .HasColumnName("sample_number");

                    b.Property<string>("SciaticNotch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sciatic_notch");

                    b.Property<string>("Shaft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shaft");

                    b.Property<string>("SharedShaft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shared_shaft");

                    b.Property<bool?>("SoftTissueTaken")
                        .HasColumnType("bit")
                        .HasColumnName("soft_tissue_taken");

                    b.Property<string>("SouthToFeet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("south_to_feet");

                    b.Property<string>("SouthToHead")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("south_to_head");

                    b.Property<string>("SubpubicAngle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("subpubic_angle");

                    b.Property<string>("SupraorbitalRidges")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("supraorbital_ridges");

                    b.Property<string>("TemporalMandibularJointOsteoarthritisTmjOa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Temporal_Mandibular_Joint_Osteoarthritis_TMJ_OA");

                    b.Property<bool?>("TextileTaken")
                        .HasColumnType("bit")
                        .HasColumnName("textile_taken");

                    b.Property<string>("TibiaLength")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tibia_length");

                    b.Property<string>("Tomb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ToothAttrition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tooth_attrition");

                    b.Property<string>("ToothEruption")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tooth_eruption");

                    b.Property<bool?>("ToothTaken")
                        .HasColumnType("bit")
                        .HasColumnName("tooth_taken");

                    b.Property<string>("VentralArc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ventral_arc");

                    b.Property<string>("WestToFeet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("west_to_feet");

                    b.Property<string>("WestToHead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("west_to_head");

                    b.Property<string>("YearFound")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("year_found");

                    b.Property<string>("YearOnSkull")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Year_on_skull");

                    b.Property<string>("ZygomaticCrest")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("zygomatic_crest");

                    b.HasKey("PrimaryKeyId");

                    b.ToTable("mainTable");
                });
#pragma warning restore 612, 618
        }
    }
}
